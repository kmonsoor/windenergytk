Option Explicit

Global G_Graph%
Dim VShear!(50, 2), FCent!(50, 2)
Dim MBend(50, 2), ThetaSlope(50, 2), Ydeflec(50, 2), YInitial(2), ThetaInitial(2)
Dim SlopeFromMoment(50), SlopeFromShear(50), DeflecFromShear(50)


Sub Influence (NSection%, aLength!(), EI!(), SlopeFromMoment(), SlopeFromShear(), DeflecFromShear())
'This is used to obtain the influence coefficients from the length and stiffness of each section

Dim i%

'Inputs
'NSection% = number of sections
'ALength() = length of sections
'EI()  =  stiffness of sections

'Outputs
'SlopeFromMoment()
'SlopeFromShear()
'DeflecFromShear()

'********
'Used for comparison with example in Thompson, p. 305

'NSection% = 4
'OmegaStart! = 10
'OmegaFinal! = 400
'DeltaOmega! = 10

'For i = 1 To NSection% - 1
'    ALength(i) = .5
'    EI(i) = 100000#
'Next i

'AMass(1) = 100
'AMass(2) = 150
'AMass(3) = 200
'********

For i = 1 To NSection% - 1
    SlopeFromMoment(i) = aLength(i) / EI(i)
    SlopeFromShear(i) = SlopeFromMoment(i) * aLength(i) / 2
    DeflecFromShear(i) = SlopeFromShear(i) * aLength(i) * 2 / 3
Next i

End Sub

Sub ModeGraph ()
    'For i = 1 To 99
    '    Points(GraphIndex, i) = Points(GraphIndex, i + 1)
    'Next i
    'Points(GraphIndex, 100) = DataSent
    'For i = 1 To 100
    '    frmCaller.Graph1(GraphIndex).GraphData = Points(GraphIndex, i)
    'Next i
    'For i = 1 To 1000000
    'Next i

    'frmCaller.Graph1(GraphIndex).DrawMode = 3

End Sub

Sub Myklestad (eYoungs!, rhoMaterial!, nSections%, aLength!(), EI!(), aMass!(), rpm!, omegaStart!, omegaFinal!, deltaOmega!, nModes%, omega!())

'This procedure performs the calculations to find the natural
'frequencies of a non-uniform beam

'Inputs
'eYoungs! = Young's modulus of material
'rhoMaterial! = density of material
'nSections% = number of sections
'aLength!() =length of section
'EI!() = stiffness of section
'aMass!() = mass of section
'rpm= rotational speed
'omegaStart! = starting frequency in calculations, rad/s
'omegaFinal! = ending frequency in calculations, rad/s
'deltaOmega! = frequency step

'Outputs
'nmodes% = number of vibration modes between omegaStart! and omegaFinal!
'omega()= natural frequency of all modes

'Module variables
'YInitial(1) = intial displacement at free end
'YInitial(2) = intial displacement at fixed end

Dim i%, j%, slope!, deflec!, deflec1!, omegaRotate, omega1!
ReDim cRotate1(2), cRotate2(2), xFromAxisOfRotation(nSections%)

YInitial(1) = 1: YInitial(2) = 0
ThetaInitial(1) = 0: ThetaInitial(2) = 1
omegaRotate = rpm! * PI / 60
'nSections% = 30

'These constants are for comparison to Euler Beam example
'--------
'rhoMaterial = (1 / 24) 'kg/m3   to get value to match kg/m
'Width1! = 24         'm
'Height1! = 1      'm
'Width2! = 24        'm
'Height2! = 1       'm
'Length! = 10        'm
'eYoungs = 5000000#  'N/m2

'deltaOmega! = .1
'These are for second mode
'omegaStart! = 695
'omegaFinal! = 710

'omegaStart! = 0
'omegaFinal! = 4000
'--------
'These constants are for pseudo blade
'--------
'rhoMaterial = 700 'kg/m3   wood?
'Width1! = 1        'm
'Height1! = .2      'm
'Width2! = 1        'm
'Height2! = .5       'm
'Length! = 10        'm
'eYoungs = 1500000# * 6895'psi, converted to N/m2
'DeltaOmega! = .05
'OmegaStart! = 30
'OmegaFinal! = 50
'OmegaRotate = 60 * Pi * 5 / 30'--------

Call Influence(nSections%, aLength!(), EI!(), SlopeFromMoment(), SlopeFromShear(), DeflecFromShear())

xFromAxisOfRotation(nSections% - 1) = aLength(1)

xFromAxisOfRotation(nSections% - 1) = aLength(1) / 2

For i% = nSections% - 2 To 1 Step -1
    xFromAxisOfRotation(i%) = xFromAxisOfRotation(i% + 1) + aLength(i%)
Next i%

While omega1 < omegaFinal

    For omega1 = omegaStart To omegaFinal Step deltaOmega
        For j = 1 To 2
'This starts at the free end of the beam
            FCent(1, j) = 0
            ThetaSlope(1, j) = ThetaInitial(j)
            Ydeflec(1, j) = YInitial(j)
            VShear(1, j) = 0
            MBend(1, j) = 0
            For i = 2 To nSections%
'For rotating beam
'------------
                FCent(i, j) = FCent(i - 1, j) + omegaRotate ^ 2 * aMass(i - 1) * xFromAxisOfRotation(i - 1)
                cRotate1(j) = 1 - FCent(i, j) * aLength(i - 1) ^ 2 / (2 * EI(i - 1))
                cRotate2(j) = FCent(i, j) * aLength(i - 1) ^ 3 / (3 * EI(i - 1))
                'cRotate1(j) = 1 '!!!test
'------------
                VShear(i, j) = VShear(i - 1, j) - aMass(i - 1) * omega1 ^ 2 * Ydeflec(i - 1, j) - FCent(i, j) * ThetaSlope(i - 1, j)
                MBend(i, j) = (MBend(i - 1, j) - VShear(i, j) * (aLength(i - 1) - cRotate2(j)) + FCent(i, j) * ThetaSlope(i - 1, j) * aLength(i - 1)) / cRotate1(j)
                ThetaSlope(i, j) = ThetaSlope(i - 1, j) + MBend(i, j) * SlopeFromMoment(i - 1) + VShear(i, j) * SlopeFromShear(i - 1)
                Ydeflec(i, j) = Ydeflec(i - 1, j) + ThetaSlope(i - 1, j) * aLength(i - 1) + MBend(i, j) * SlopeFromShear(i - 1) + VShear(i, j) * DeflecFromShear(i - 1)
            Next i
        Next j
        
        slope = -ThetaSlope(nSections%, 1) / ThetaSlope(nSections%, 2)
        deflec1 = deflec
        deflec = Ydeflec(nSections%, 1) + Ydeflec(nSections%, 2) * slope
        If omega1 > omegaStart And Sgn(deflec) <> Sgn(deflec1) Then
            omega1 = omega1 + deltaOmega / 2
            nModes% = nModes% + 1
            Exit For
        Else
            omega1 = omega1 + deltaOmega
        End If
    Next omega1
    
    ReDim Preserve omega!(nModes%)
    If omega1 > omegaFinal Then
        Exit Sub
    End If
    omega!(nModes%) = omega1
    omegaStart = omega1
Wend

End Sub

Function Sinh (x)
'This finds the hyberbolic sine
Sinh = (Exp(x) - Exp(-x)) / 2
End Function

Sub TaperedBeam (NSection%, Rho!, Width1!, Height1!, Width2!, Height2!, Length!, eYoungs, aLength!(), EI!(), aMass!())
'This finds parameters of a rectangular  cantilevered
'beam with rectangular cross section and uniform material

'Inputs
'NSection% = number of sections
'Rho! = mass density of material
'Width1! = width of beam at free end
'Height1! = height of beam at free end
'Width2!  = width of beam at fixed end
'Height2! = width of beam at fixed end
'Length!  = total length of beam
'eYoungs = Young's modulus

'Outputs
'aMass() = mass of section
'ei() = stiffness of section

Dim w1!, w2!, wav!, h1!, h2!, hav!, vol!, inertia!, i%

For i = 1 To NSection - 1
'Average width
    w1 = Width1! - (Width1! - Width2) * ((i - 1) / NSection)   'Check this!
    w2 = Width1! - (Width1! - Width2) * (i / NSection)
    wav = (w1 + w2) / 2
'Average height
    h1 = Height1! - (Height1! - Height2!) * ((i - 1) / NSection)
    h2 = Height1! - (Height1! - Height2!) * (i / NSection)
    hav! = (h1! + h2!) / 2
'Mass of section
    vol! = ((h1 * w1 + h2 * w2) / 2) * Length / (NSection - 1)
    aMass(i) = vol! * Rho!
'Area moment of inertia
    inertia = hav! ^ 3 * wav! / 12
'Stiffness
    EI(i) = inertia * eYoungs
    aLength(i) = Length! / (NSection - 1)
    If i = NSection - 1 Then aLength(NSection - 1) = aLength(NSection - 1) / 2'Closest to wall
    '!!!moved to Influence!!! SlopeFromMoment(i) = ALength(i) / EI(i)
    '!!!moved to Influence!!! SlopeFromShear(i) = SlopeFromMoment(i) * ALength(i) / 2
    '!!!moved to Influence!!! DeflecFromShear(i) = SlopeFromShear(i) * ALength(i) * 2 / 3
Next i

'ALength(NSection) = ALength(NSection) / 2   'Closest to wall
End Sub

